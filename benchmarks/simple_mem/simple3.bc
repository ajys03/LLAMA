; ModuleID = '<stdin>'
source_filename = "simple_calloc.c"
target datalayout = "e-m:o-i64:64-i128:128-n32:64-S128-Fn32"
target triple = "arm64-apple-macosx14.0.0"

@.str = private unnamed_addr constant [13 x i8] c"Successful!\0A\00", align 1
@.str.1 = private unnamed_addr constant [9 x i8] c"Failed!\0A\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"Done!\0A\00", align 1
@.str.3 = private unnamed_addr constant [94 x i8] c"=========================\0A Simple Memory Allocator\0A\09CALLOC EDITION\0A=========================\0A\00", align 1

; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca ptr, align 8
  %3 = alloca i32, align 4
  %4 = alloca i8, align 1
  %5 = alloca ptr, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i32 0, ptr %1, align 4
  call void @logo()
  %9 = call ptr @_internal_malloc(i64 noundef 3000000)
  store ptr %9, ptr %2, align 8
  store i32 0, ptr %3, align 4
  br label %10

10:                                               ; preds = %19, %0
  %11 = load i32, ptr %3, align 4
  %12 = icmp slt i32 %11, 750000
  br i1 %12, label %13, label %22

13:                                               ; preds = %10
  %14 = load i32, ptr %3, align 4
  %15 = load ptr, ptr %2, align 8
  %16 = load i32, ptr %3, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds i32, ptr %15, i64 %17
  store i32 %14, ptr %18, align 4
  br label %19

19:                                               ; preds = %13
  %20 = load i32, ptr %3, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, ptr %3, align 4
  br label %10, !llvm.loop !5

22:                                               ; preds = %10
  store i8 1, ptr %4, align 1
  store i32 0, ptr %3, align 4
  br label %23

23:                                               ; preds = %36, %22
  %24 = load i32, ptr %3, align 4
  %25 = icmp slt i32 %24, 750000
  br i1 %25, label %26, label %39

26:                                               ; preds = %23
  %27 = load ptr, ptr %2, align 8
  %28 = load i32, ptr %3, align 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds i32, ptr %27, i64 %29
  %31 = load i32, ptr %30, align 4
  %32 = load i32, ptr %3, align 4
  %33 = icmp ne i32 %31, %32
  br i1 %33, label %34, label %35

34:                                               ; preds = %26
  store i8 0, ptr %4, align 1
  br label %39

35:                                               ; preds = %26
  br label %36

36:                                               ; preds = %35
  %37 = load i32, ptr %3, align 4
  %38 = add nsw i32 %37, 1
  store i32 %38, ptr %3, align 4
  br label %23, !llvm.loop !7

39:                                               ; preds = %34, %23
  %40 = load i8, ptr %4, align 1
  %41 = icmp ne i8 %40, 0
  br i1 %41, label %42, label %44

42:                                               ; preds = %39
  %43 = call i32 (ptr, ...) @printf(ptr noundef @.str)
  br label %46

44:                                               ; preds = %39
  %45 = call i32 (ptr, ...) @printf(ptr noundef @.str.1)
  br label %46

46:                                               ; preds = %44, %42
  %47 = call ptr @_internal_calloc(i64 noundef 4, i64 noundef 750000)
  store ptr %47, ptr %5, align 8
  store i32 0, ptr %3, align 4
  br label %48

48:                                               ; preds = %61, %46
  %49 = load i32, ptr %3, align 4
  %50 = icmp slt i32 %49, 750000
  br i1 %50, label %51, label %64

51:                                               ; preds = %48
  %52 = load ptr, ptr %2, align 8
  %53 = load i32, ptr %3, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i32, ptr %52, i64 %54
  %56 = load i32, ptr %55, align 4
  %57 = load ptr, ptr %5, align 8
  %58 = load i32, ptr %3, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i32, ptr %57, i64 %59
  store i32 %56, ptr %60, align 4
  br label %61

61:                                               ; preds = %51
  %62 = load i32, ptr %3, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, ptr %3, align 4
  br label %48, !llvm.loop !8

64:                                               ; preds = %48
  store i32 0, ptr %6, align 4
  store i32 0, ptr %3, align 4
  br label %65

65:                                               ; preds = %93, %64
  %66 = load i32, ptr %3, align 4
  %67 = icmp slt i32 %66, 750000
  br i1 %67, label %68, label %96

68:                                               ; preds = %65
  %69 = load i32, ptr %6, align 4
  %70 = load ptr, ptr %2, align 8
  %71 = load i32, ptr %3, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i32, ptr %70, i64 %72
  store i32 %69, ptr %73, align 4
  store i32 0, ptr %7, align 4
  br label %74

74:                                               ; preds = %89, %68
  %75 = load i32, ptr %7, align 4
  %76 = icmp slt i32 %75, 1
  br i1 %76, label %77, label %92

77:                                               ; preds = %74
  store i32 0, ptr %8, align 4
  br label %78

78:                                               ; preds = %85, %77
  %79 = load i32, ptr %8, align 4
  %80 = icmp slt i32 %79, 5
  br i1 %80, label %81, label %88

81:                                               ; preds = %78
  %82 = load i32, ptr %7, align 4
  %83 = load i32, ptr %8, align 4
  %84 = mul nsw i32 %82, %83
  store i32 %84, ptr %6, align 4
  br label %85

85:                                               ; preds = %81
  %86 = load i32, ptr %8, align 4
  %87 = add nsw i32 %86, 1
  store i32 %87, ptr %8, align 4
  br label %78, !llvm.loop !9

88:                                               ; preds = %78
  br label %89

89:                                               ; preds = %88
  %90 = load i32, ptr %7, align 4
  %91 = add nsw i32 %90, 1
  store i32 %91, ptr %7, align 4
  br label %74, !llvm.loop !10

92:                                               ; preds = %74
  br label %93

93:                                               ; preds = %92
  %94 = load i32, ptr %3, align 4
  %95 = add nsw i32 %94, 1
  store i32 %95, ptr %3, align 4
  br label %65, !llvm.loop !11

96:                                               ; preds = %65
  %97 = call i32 (ptr, ...) @printf(ptr noundef @.str.2)
  ret i32 0
}

; Function Attrs: noinline nounwind optnone ssp uwtable(sync)
define void @logo() #0 {
  %1 = call i32 (ptr, ...) @printf(ptr noundef @.str.3)
  ret void
}

declare ptr @_internal_malloc(i64 noundef) #1

declare i32 @printf(ptr noundef, ...) #1

declare ptr @_internal_calloc(i64 noundef, i64 noundef) #1

attributes #0 = { noinline nounwind optnone ssp uwtable(sync) "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+altnzcv,+ccdp,+ccidx,+complxnum,+crc,+dit,+dotprod,+flagm,+fp-armv8,+fp16fml,+fptoint,+fullfp16,+jsconv,+lse,+neon,+pauth,+perfmon,+predres,+ras,+rcpc,+rdm,+sb,+sha2,+sha3,+specrestrict,+ssbs,+v8.1a,+v8.2a,+v8.3a,+v8.4a,+v8a,+zcm,+zcz" }
attributes #1 = { "frame-pointer"="non-leaf" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="apple-m1" "target-features"="+aes,+altnzcv,+ccdp,+ccidx,+complxnum,+crc,+dit,+dotprod,+flagm,+fp-armv8,+fp16fml,+fptoint,+fullfp16,+jsconv,+lse,+neon,+pauth,+perfmon,+predres,+ras,+rcpc,+rdm,+sb,+sha2,+sha3,+specrestrict,+ssbs,+v8.1a,+v8.2a,+v8.3a,+v8.4a,+v8a,+zcm,+zcz" }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"uwtable", i32 1}
!3 = !{i32 7, !"frame-pointer", i32 1}
!4 = !{!"Homebrew clang version 19.1.4"}
!5 = distinct !{!5, !6}
!6 = !{!"llvm.loop.mustprogress"}
!7 = distinct !{!7, !6}
!8 = distinct !{!8, !6}
!9 = distinct !{!9, !6}
!10 = distinct !{!10, !6}
!11 = distinct !{!11, !6}
